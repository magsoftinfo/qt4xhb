/*

  Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4

  Copyright (C) 2021 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QNetworkAccessManagerSlots.h"

QNetworkAccessManagerSlots::QNetworkAccessManagerSlots( QObject * parent ) : QObject( parent )
{
}

QNetworkAccessManagerSlots::~QNetworkAccessManagerSlots()
{
}

void QNetworkAccessManagerSlots::authenticationRequired( QNetworkReply * reply, QAuthenticator * authenticator )
{
  QObject * object = qobject_cast<QObject *>( sender() );

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock( object, "authenticationRequired(QNetworkReply*,QAuthenticator*)" );

  if( cb )
  {
    PHB_ITEM psender = Qt4xHb::Signals_return_qobject( static_cast< QObject * >( object ), "QNETWORKACCESSMANAGER" );
    PHB_ITEM preply = Qt4xHb::Signals_return_qobject( static_cast< QObject * >( reply ), "QNETWORKREPLY" );
    PHB_ITEM pauthenticator = Qt4xHb::Signals_return_object( ( void * ) authenticator, "QAUTHENTICATOR" );

    hb_vmEvalBlockV( cb, 3, psender, preply, pauthenticator );

    hb_itemRelease( psender );
    hb_itemRelease( preply );
    hb_itemRelease( pauthenticator );
  }
}

void QNetworkAccessManagerSlots::finished( QNetworkReply * reply )
{
  QObject * object = qobject_cast<QObject *>( sender() );

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock( object, "finished(QNetworkReply*)" );

  if( cb )
  {
    PHB_ITEM psender = Qt4xHb::Signals_return_qobject( static_cast< QObject * >( object ), "QNETWORKACCESSMANAGER" );
    PHB_ITEM preply = Qt4xHb::Signals_return_qobject( static_cast< QObject * >( reply ), "QNETWORKREPLY" );

    hb_vmEvalBlockV( cb, 2, psender, preply );

    hb_itemRelease( psender );
    hb_itemRelease( preply );
  }
}

void QNetworkAccessManagerSlots::networkAccessibleChanged( QNetworkAccessManager::NetworkAccessibility accessible )
{
  QObject * object = qobject_cast<QObject *>( sender() );

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock( object, "networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility)" );

  if( cb )
  {
    PHB_ITEM psender = Qt4xHb::Signals_return_qobject( static_cast< QObject * >( object ), "QNETWORKACCESSMANAGER" );
    PHB_ITEM paccessible = hb_itemPutNI( NULL, ( int ) accessible );

    hb_vmEvalBlockV( cb, 2, psender, paccessible );

    hb_itemRelease( psender );
    hb_itemRelease( paccessible );
  }
}

void QNetworkAccessManagerSlots::proxyAuthenticationRequired( const QNetworkProxy & proxy, QAuthenticator * authenticator )
{
  QObject * object = qobject_cast<QObject *>( sender() );

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock( object, "proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)" );

  if( cb )
  {
    PHB_ITEM psender = Qt4xHb::Signals_return_qobject( static_cast< QObject * >( object ), "QNETWORKACCESSMANAGER" );
    PHB_ITEM pproxy = Qt4xHb::Signals_return_object( ( void * ) &proxy, "QNETWORKPROXY" );
    PHB_ITEM pauthenticator = Qt4xHb::Signals_return_object( ( void * ) authenticator, "QAUTHENTICATOR" );

    hb_vmEvalBlockV( cb, 3, psender, pproxy, pauthenticator );

    hb_itemRelease( psender );
    hb_itemRelease( pproxy );
    hb_itemRelease( pauthenticator );
  }
}

void QNetworkAccessManagerSlots::sslErrors( QNetworkReply * reply, const QList<QSslError> & errors )
{
  QObject * object = qobject_cast<QObject *>( sender() );

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock( object, "sslErrors(QNetworkReply*,QList<QSslError>)" );

  if( cb )
  {
    PHB_ITEM psender = Qt4xHb::Signals_return_qobject( static_cast< QObject * >( object ), "QNETWORKACCESSMANAGER" );
    PHB_ITEM preply = Qt4xHb::Signals_return_qobject( static_cast< QObject * >( reply ), "QNETWORKREPLY" );
    PHB_DYNS pDynSym = hb_dynsymFindName( "QSSLERROR" );
    PHB_ITEM perrors = hb_itemArrayNew( 0 );
    if( pDynSym )
    {
      for( int i = 0; i < errors.count(); i++ )
      {
        hb_vmPushDynSym( pDynSym );
        hb_vmPushNil();
        hb_vmDo( 0 );
        PHB_ITEM pTempObject = hb_itemNew( NULL );
        hb_itemCopy( pTempObject, hb_stackReturnItem() );
        PHB_ITEM pTempItem = hb_itemNew( NULL );
        hb_itemPutPtr( pTempItem, static_cast< QSslError * >( new QSslError( errors [i] ) ) );
        hb_objSendMsg( pTempObject, "NEWFROMPOINTER", 1, pTempItem );
        hb_arrayAddForward( perrors, pTempObject );
        hb_itemRelease( pTempObject );
        hb_itemRelease( pTempItem );
      }
    }
    else
    {
      hb_errRT_BASE( EG_NOFUNC, 1001, NULL, "QSSLERROR", HB_ERR_ARGS_BASEPARAMS );
    }

    hb_vmEvalBlockV( cb, 3, psender, preply, perrors );

    hb_itemRelease( psender );
    hb_itemRelease( preply );
    hb_itemRelease( perrors );
  }
}

void QNetworkAccessManagerSlots_connect_signal( const QString & signal, const QString & slot )
{
  QNetworkAccessManager * obj = static_cast< QNetworkAccessManager * >( Qt4xHb::itemGetPtrStackSelfItem() );

  if( obj )
  {
    QNetworkAccessManagerSlots * s = QCoreApplication::instance()->findChild<QNetworkAccessManagerSlots *>();

    if( s == NULL )
    {
      s = new QNetworkAccessManagerSlots();
      s->moveToThread( QCoreApplication::instance()->thread() );
      s->setParent( QCoreApplication::instance() );
    }

    hb_retl( Qt4xHb::Signals_connection_disconnection( s, signal, slot ) );
  }
  else
  {
    hb_retl( false );
  }
}
