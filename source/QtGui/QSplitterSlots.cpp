/*

  Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4

  Copyright (C) 2021 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QSplitterSlots.h"

QSplitterSlots::QSplitterSlots( QObject * parent ) : QObject( parent )
{
}

QSplitterSlots::~QSplitterSlots()
{
}

void QSplitterSlots::splitterMoved( int pos, int index )
{
  QObject * object = qobject_cast<QObject *>( sender() );

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock( object, "splitterMoved(int,int)" );

  if( cb )
  {
    PHB_ITEM psender = Qt4xHb::Signals_return_qobject( static_cast< QObject * >( object ), "QSPLITTER" );
    PHB_ITEM ppos = hb_itemPutNI( NULL, pos );
    PHB_ITEM pindex = hb_itemPutNI( NULL, index );

    hb_vmEvalBlockV( cb, 3, psender, ppos, pindex );

    hb_itemRelease( psender );
    hb_itemRelease( ppos );
    hb_itemRelease( pindex );
  }
}

void QSplitterSlots_connect_signal( const QString & signal, const QString & slot )
{
  QSplitter * obj = static_cast< QSplitter * >( Qt4xHb::itemGetPtrStackSelfItem() );

  if( obj )
  {
    QSplitterSlots * s = QCoreApplication::instance()->findChild<QSplitterSlots *>();

    if( s == NULL )
    {
      s = new QSplitterSlots();
      s->moveToThread( QCoreApplication::instance()->thread() );
      s->setParent( QCoreApplication::instance() );
    }

    hb_retl( Qt4xHb::Signals_connection_disconnection( s, signal, slot ) );
  }
  else
  {
    hb_retl( false );
  }
}
