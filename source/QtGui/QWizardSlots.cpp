/*

  Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4

  Copyright (C) 2021 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QWizardSlots.h"

QWizardSlots::QWizardSlots( QObject * parent ) : QObject( parent )
{
}

QWizardSlots::~QWizardSlots()
{
}

void QWizardSlots::currentIdChanged( int id )
{
  QObject * object = qobject_cast<QObject *>( sender() );

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock( object, "currentIdChanged(int)" );

  if( cb )
  {
    PHB_ITEM psender = Qt4xHb::Signals_return_qobject( static_cast< QObject * >( object ), "QWIZARD" );
    PHB_ITEM pid = hb_itemPutNI( NULL, id );

    hb_vmEvalBlockV( cb, 2, psender, pid );

    hb_itemRelease( psender );
    hb_itemRelease( pid );
  }
}

void QWizardSlots::customButtonClicked( int which )
{
  QObject * object = qobject_cast<QObject *>( sender() );

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock( object, "customButtonClicked(int)" );

  if( cb )
  {
    PHB_ITEM psender = Qt4xHb::Signals_return_qobject( static_cast< QObject * >( object ), "QWIZARD" );
    PHB_ITEM pwhich = hb_itemPutNI( NULL, which );

    hb_vmEvalBlockV( cb, 2, psender, pwhich );

    hb_itemRelease( psender );
    hb_itemRelease( pwhich );
  }
}

void QWizardSlots::helpRequested()
{
  QObject * object = qobject_cast<QObject *>( sender() );

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock( object, "helpRequested()" );

  if( cb )
  {
    PHB_ITEM psender = Qt4xHb::Signals_return_qobject( static_cast< QObject * >( object ), "QWIZARD" );

    hb_vmEvalBlockV( cb, 1, psender );

    hb_itemRelease( psender );
  }
}

void QWizardSlots::pageAdded( int id )
{
  QObject * object = qobject_cast<QObject *>( sender() );

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock( object, "pageAdded(int)" );

  if( cb )
  {
    PHB_ITEM psender = Qt4xHb::Signals_return_qobject( static_cast< QObject * >( object ), "QWIZARD" );
    PHB_ITEM pid = hb_itemPutNI( NULL, id );

    hb_vmEvalBlockV( cb, 2, psender, pid );

    hb_itemRelease( psender );
    hb_itemRelease( pid );
  }
}

void QWizardSlots::pageRemoved( int id )
{
  QObject * object = qobject_cast<QObject *>( sender() );

  PHB_ITEM cb = Qt4xHb::Signals_return_codeblock( object, "pageRemoved(int)" );

  if( cb )
  {
    PHB_ITEM psender = Qt4xHb::Signals_return_qobject( static_cast< QObject * >( object ), "QWIZARD" );
    PHB_ITEM pid = hb_itemPutNI( NULL, id );

    hb_vmEvalBlockV( cb, 2, psender, pid );

    hb_itemRelease( psender );
    hb_itemRelease( pid );
  }
}

void QWizardSlots_connect_signal( const QString & signal, const QString & slot )
{
  QWizard * obj = static_cast< QWizard * >( Qt4xHb::itemGetPtrStackSelfItem() );

  if( obj )
  {
    QWizardSlots * s = QCoreApplication::instance()->findChild<QWizardSlots *>();

    if( s == NULL )
    {
      s = new QWizardSlots();
      s->moveToThread( QCoreApplication::instance()->thread() );
      s->setParent( QCoreApplication::instance() );
    }

    hb_retl( Qt4xHb::Signals_connection_disconnection( s, signal, slot ) );
  }
  else
  {
    hb_retl( false );
  }
}
